@using JehovaJireh.Web.UI.App_GlobalResources
@{
    ViewBag.Title = Resources.SchedulerDonation;
}

<h2>@ViewBag.Title</h2>
<div id="scheduler"></div>
<h3>Drags events from the Grid to the Scheduler:</h3>
<div id="grid"></div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/areYouSure")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/moment")
    @Scripts.Render("~/bundles/donation/donationviewmodel")
    @Styles.Render("~/bundles/kendo-css")
    @Scripts.Render("~/bundles/kendo")
 <script id="rowTemplate" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">
        <td class="photo">
            <img src="/img/no-photo.png" alt="#: Title #" />
        </td>
        <td class="details">
            <span class="title">#: Title #</span>
        </td>
        <td class="country">
            #: Description #
        </td>
        <td class="country">
            <a class="k-button k-button-icontext k-grid-edit" href="\\#" onclick="setDonationRequestedBy(this, '#= Id #');"><span class="k-icon k-i-cart"></span>View Details</a>
        </td>
    </tr>
</script>
<script id="altRowTemplate" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">
        <td class="photo">
            <img src="/img/no-photo.png" alt="#: Title #" />
        </td>
        <td class="details">
            <span class="title">Title: #: Title #</span>
        </td>
        <td class="country">
            #: Description #
        </td>
        <td class="country"><a class="k-button k-button-icontext k-grid-edit" href="\\#" onclick="setDonationRequestedBy(this, '#= Id #');"><span class="k-icon k-i-cart"></span>View Details</a></td>
    </tr>
</script>
<script id="event-template" type="text/x-kendo-template">
    <div class="movie-template">
        <img src="#= imageUrl #">
        <p>
            #: kendo.toString(start, "hh:mm") # - #: kendo.toString(end, "hh:mm") #
        </p>
        <h3>#: title #</h3>
        <p>#: description #</p>
    </div>
</script>
    <script type="text/javascript">
        $(function () {
            var userId = "@ViewBag.UserId";

            function scheduler_edit(e) {
                console.log("edit");
                var currentDate = new Date(moment().format("M/D/YYYY"));
                var start = new Date(moment(e.event.start).format("M/D/YYYY"));

                if (moment(start).isBefore(currentDate)) {
                    e._defaultPrevented = true;
                    alert('@Resources.SchedulerMessage');
                }
            }

            function scheduler_navigate(e) {
                var currentDate = moment().format("M/D/YYYY");
                if (e.action === 'previous' && moment(e.date).isBefore(currentDate)) {
                    e.preventDefault();
                    $($(e.sender.element[0].firstChild).find('.k-state-default.k-header.k-nav-prev.k-state-hover')).css('opacity', .5);
                    console.log(kendo.format("navigate:: action:{0}; view:{1}; date:{2:d};", e.action, e.view, e.date));
                } else {
                    $(e.sender.element[0].firstChild).find('li.k-state-default.k-header.k-nav-prev').css('opacity', 1);
                }
            }

            function scheduler_change(e) {
                var currentDate = new Date(moment().format("M/D/YYYY"));
                var start = e.start; //selection start date

                if (moment(start).isBefore(currentDate)) {
                    start = new Date(moment(e.start).format("M/D/YYYY")); //selection start date
                    alert('@Resources.SchedulerMessage');
                    e.preventDefault;
                }
                else {
                    var end = e.end; //selection end date
                    var slots = e.slots; //list of selected slots
                    var events = e.events; //list of selected Scheduler events
                    var message = "change:: selection from {0:g} till {1:g}";

                    if (events.length) {
                        message += ". The selected event is '" + events[events.length - 1].title + "'";
                    }

                    console.log(kendo.format(message, start, end));
                }
            }

            function scheduler_moveEnd(e) {
                console.log("moveEnd");
                var currentDate = new Date(moment().format("M/D/YYYY"));
                var start = new Date(moment(e.event.start).format("M/D/YYYY"));

                if (moment(start).isBefore(currentDate)) {
                    e._defaultPrevented = true;
                    alert('@Resources.SchedulerMessage');
                }
            }

            var gridDataSource = new kendo.data.DataSource({
                error: function (e) {
                    alert("An general error occurred.")
                    this.cancelChanges();
                },
                contentType: "application/json",
                transport: {
                    read: {
                        url: getBaseUrl() + kendo.format("Donations/{0}/RequestedBy", userId),
                        dataType: "json"
                    },
                    destroy: {
                        url: getBaseUrl() + kendo.format("Donations/{0}/RequestedBy", userId),
                        dataType: "json"
                    },
                },
                pageSize: 20,
                serverPaging: false,
                serverSorting: false,
                sort: { field: "Id", dir: "desc" }
            });

            var grid = $("#grid").kendoGrid({
                dataSource: gridDataSource,
                height: 550,
                sortable: true,
                pageable: false,
                rowTemplate: kendo.template($("#rowTemplate").html()),
                altRowTemplate: kendo.template($("#altRowTemplate").html()),
                columns: [
                    {
                        field: "ImageUrl",
                        title: "@Resources.ImageUrl",
                        width: "100px"
                    },
                    {
                        field: "Title",
                        title: "@Resources.Title",
                        width: "150px"
                    },
                    {
                        field: "Description",
                        title: "@Resources.Description",
                        width: "150px"
                    },
                    {
                        command: [{
                            text: "View Details",
                            click: showDetails,
                            iconClass: "k-icon k-i-preview k-i-eye"
                        }
                        ],
                        class: "test",
                        title: " ",
                        width: "190px"
                    }
                ]
            });

            var _grid = $(grid).data("kendoGrid");

            $(_grid.element).kendoDraggable({
                filter: "tr",
                hint: function (e) {
                    var item = $('<div class="k-grid k-widget" style="background-color: DarkOrange; color: black;"><table><tbody><tr>' + e.html() + '</tr></tbody></table></div>');
                    return item;
                },
                group: "gridGroup1",
            });

            $("#scheduler").kendoScheduler({
                date: new Date(moment().format("YYYY/M/DD")),
                startTime: new Date(moment().format("YYYY/M/DD 7:00")),
                height: 400,
                timezone: "Etc/UTC",
                navigate: scheduler_navigate,
                change: scheduler_change,
                edit: scheduler_edit,
                moveEnd: scheduler_moveEnd,
                remove: function scheduler_remove(e) {
                    e.preventDefault();
                    console.log("removing");
                    var event = e.event;
                    event.id = event.taskID;
                    this.dataSource.remove(event);
                    this.dataSource.sync().then(function () {
                        //retrieve grid dataItem
                        var data = gridDataSource.data();
                        var dataItem = getGridDataItem(event.donation, event.item, data);
                        //change status to 2
                        //refresh grid

                        console.log("done");
                    }, function () {
                        alert("Error.")
                    });
                    
                },
                dataBound: function (e) {
                    //create drop area from current View
                    createDropArea(this);
                },
                eventTemplate: $("#event-template").html(),
                views: [
                    "day",
                    { type: "week", selected: true },
                    "month",
                    "agenda",
                    "timeline"
                ],
                timezone: "Etc/UTC",
                dataSource: {
                    error: function (e) {
                        alert(e.status);
                        this.cancelChanges();
                    },
                    success: function (e) {
                        alert("success...");
                    },
                    transport: {
                        read: {
                            url: getBaseUrl() + kendo.format("scheduler/{0}/createdBy", userId),
                            xhrFields: {
                                withCredentials: true
                            },
                            dataType: "json",
                            contentType: "application/json",
                            type: "GET"
                        },
                        update: {
                            url: function (model) {
                                return getBaseUrl() + "scheduler/" + model.Id
                            },
                            xhrFields: {
                                withCredentials: true
                            },
                            dataType: "json",
                            contentType: "application/json",
                            type: "PUT",
                            complete: function (e) {
                                //REFRESH THE GRID IN SUCCESS.
                                e.success(function (e) {
                                    console.log("Succcess");
                                });

                                e.error(function (e) {
                                    console.log("error");
                                });
                            },
                        },
                        create: {
                            url: getBaseUrl() + "scheduler",
                            xhrFields: {
                                withCredentials: true
                            },
                            contentType: "application/json",
                            type: "POST",
                            complete: function (e) {
                                //REFRESH THE GRID IN SUCCESS.
                                e.success(function (e) {
                                    console.log("Succcess");
                                });

                                e.error(function (e) {
                                    console.log("error");
                                });
                            },
                            success: function (data) {
                                alert(data);
                            }
                        },
                        destroy: {
                            url: function (model) {
                                return getBaseUrl() + "scheduler/" + model.Id
                            },
                            xhrFields: {
                                withCredentials: true
                            },
                            contentType: "application/json",
                            type: "DELETE",
                            complete: function (e) {
                                //REFRESH THE GRID IN SUCCESS.
                                e.success(function (e) {
                                    console.log("Succcess");
                                });

                                e.error(function (e) {
                                    console.log("error");
                                });
                            }
                        },
                        parameterMap: function (options, operation) {
                            if (operation !== "read" && options) {
                                return  kendo.stringify(options);
                            }
                        }
                    },
                    schema: {
                        model: {
                            id: "Id",
                            fields: {
                                taskID: { from: "Id", type: "number" },
                                title: { from: "Title", defaultValue: "No title", validation: { required: true } },
                                start: { type: "date", from: "StartDate" },
                                end: { type: "date", from: "EndDate" },
                                startTimezone: { from: "StartTimezone" },
                                endTimezone: { from: "EndTimezone" },
                                description: { from: "Description" },
                                recurrenceId: { from: "RecurrenceID" },
                                recurrenceRule: { from: "RecurrenceRule" },
                                recurrenceException: { from: "RecurrenceException" },
                                createdBy: { from: "CreatedBy", defaultValue: { Id: userId } },
                                imageUrl: { from: "ImageUrl" },
                                donation: { from: "Donation", validation: { required: true } },
                                item: { from: "Item", validation: { required: true } },
                                isAllDay: { type: "boolean", from: "IsAllDay" },
                                createdOn: {type: "date"}
                            }
                        }
                    }
                }
            });

            function getGridDataItem(donation, item, array) {
                var result = $.grep(array, function (n, i) {
                    return item !== null || item !== "" ? (n.Donation.Id === donation.Id && n.ItemId === (item !== null ? item.Id : "")) : (n.Donation.Id === donation.Id);
                });

                try {
                    return result[0];
                } catch (e) {
                    return null;
                }
            }

           function createDropArea(scheduler) {
                scheduler.view().content.kendoDropTargetArea({
                    filter: ".k-scheduler-table td, .k-event",
                    drop: function (e) {

                        var offset = $(e.dropTarget).offset();
                        var slot = scheduler.slotByPosition(offset.left, offset.top);
                        var dataItem = gridDataSource.getByUid(e.draggable.currentTarget.data("uid"));

                        if (dataItem && slot) {
                            var offsetMiliseconds = new Date().getTimezoneOffset() * 60000;
                            var newEvent = {
                                id: null,
                                title: dataItem.Title,
                                end: slot.endDate,
                                start: slot.startDate,
                                isAllDay: slot.isDaySlot,
                                description: dataItem.Description,
                                item: dataItem.ItemId === '00000000-0000-0000-0000-000000000000' ? null : { Id: dataItem.ItemId },
                                imageUrl: dataItem.ImageUrl,
                                donation: dataItem.Donation,
                                createdBy: { id: userId },
                                createdOn: new Date(),
                                startTimezone: "Etc/UTC",
                                endTimezone: "Etc/UTC",
                                recurrenceId: null,
                                recurrenceRule: null,
                                recurrenceException: null
                            };

                            scheduler.dataSource.add(newEvent);
                            scheduler.dataSource.sync().then(function (e) {
                                gridDataSource.remove(dataItem);
                            }, function (e) {
                                alert("error.")
                            });
                        }
                    },
                    group: "gridGroup1"
               });
            }
        });

        function showDetails(e) {
            var pos = $(e.currentTarget).position();
            var width = $(e.currentTarget).outerWidth();
            e.preventDefault();

            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            wnd.content(detailsTemplate(dataItem));
            wnd.center().open().element.closest(".k-window").css({
                top: pos.top + "px",
                left: pos.left + width + "px"
            });

            wnd.element
                .append($('<div class="k-edit-buttons k-state-default"><a role="button" class="k-button k-button-icontext close-button" href="#"><span class="k-icon k-i-close"></span>Close</a></div>'));

            $(".close-button").click(function () {
                wnd.close();
            });
        }
    </script>
    <style>
        
    </style>
}